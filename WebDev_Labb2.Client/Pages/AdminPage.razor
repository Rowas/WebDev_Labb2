@page "/admin"
@inject HttpClient Http
<MudLayout>



	<h3>Admin Page</h3>
	<MudPaper Class="py-3" Elevation="1">
		<MudNavMenu class="d-none d-md-flex align-center flex-grow-1">
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="NewCustomer" Style="min-width:200px; padding-right:15px;">Register New Customer</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="EditCustomer" Style="min-width:200px; padding-right:15px;">Edit Customer</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="NewProduct" Style="min-width:200px; padding-right:15px;">Register New Product</MudButton>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="EditProduct" Style="min-width:200px;">Edit Product</MudButton>
		</MudNavMenu>
	</MudPaper>
	<MudMainContent>
		@if(newCustomer == true || newProduct == true)
		{
				 
		}
	</MudMainContent>
	<MudContainer class="d-flex justify-center flex-grow-1 gap-4" Elevation="0">
		<MudNavMenu>
			<MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="UpdateDatabase" Style="min-width:200px; height: auto;">Update Database</MudButton>
		</MudNavMenu>
	</MudContainer>
</MudLayout>
@code {
	private bool newCustomer = false;
	private bool newProduct = false;
	private bool editProduct = false;
	private bool editCustomer = false;


	private bool prodRegSuccess = false;

	private bool apiCall = false;

	private string apiResponse = string.Empty;

	private string customerSearch = string.Empty;
	private string productSearch = string.Empty;
	private string editField = string.Empty;
	private string editValue = string.Empty;

	Customers customer = new Customers();
	Products product = new Products();

	Customers[] customerList;
	Products[] productList;

	protected override async Task OnInitializedAsync()
	{
		customerList = await Http.GetFromJsonAsync<Customers[]>("http://localhost:5132/customers");
		productList = await Http.GetFromJsonAsync<Products[]>("http://localhost:5132/products");
	}

	private void NewCustomer()
	{
		newProduct = false;
		editCustomer = false;
		editProduct = false;
		newCustomer = true;
		customer = new Customers()
			{
				email = "",
				username = "",
				userlevel = "customer",
				firstname = "",
				lastname = "",
				mobile_number = "",
				delivery_adress = new DeliveryAddress()
				{
					street = "",
					post_code = "",
					city = "",
					country = ""
				}
			};
		StateHasChanged();
	}

	private void UpdateDatabase()
	{
		
	}

	private void NewProduct()
	{
		newCustomer = false;
		editCustomer = false;
		editProduct = false;
		newProduct = true;
		product = new Products()
			{
				sku = 0,
				price = 0,
				in_stock = false,
				name = "",
				appearance = "",
				atomic_mass = 0,
				category = "",
				density = 0,
				melt = 0,
				boil = 0,
				number = 0,
				phase = "",
				source = "",
				bohr_model_image = "",
				summary = "",
				symbol = "",
				cpk_hex = "",
				block = ""
			};
		StateHasChanged();
	}

	private void EditProduct()
	{
		newCustomer = false;
		newProduct = false;
		editCustomer = false;
		editProduct = true;
		StateHasChanged();
	}

	private void EditCustomer()
	{
		newCustomer = false;
		newProduct = false;
		editProduct = false;
		editCustomer = true;
		StateHasChanged();
	}

	private async void SearchCustomer()
	{
		apiCall = false;
		customer = await Http.GetFromJsonAsync<Customers>($"http://localhost:5132/customers/{customerSearch}");
		apiCall = true;
		if (customer == null)
		{
			apiResponse = "Customer not found";
		}

		StateHasChanged();
	}

	private async void SearchProduct()
	{
		apiCall = false;
		product = await Http.GetFromJsonAsync<Products>($"http://localhost:5132/products/{productSearch}");
		apiCall = true;
		if (product == null)
		{
			apiResponse = "Product not found";
		}
		StateHasChanged();
	}

	private async void RegUser()
	{
		var response = await Http.PostAsJsonAsync<Customers>("http://localhost:5132/customers", customer);
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			apiCall = true;
			apiResponse = response.Content.ReadAsStringAsync().Result;
			StateHasChanged();
		}
	}

	private async void RegProduct()
	{
		var response = await Http.PostAsJsonAsync<Products>("http://localhost:5132/products", product);
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			prodRegSuccess = true;
			StateHasChanged();
		}
	}

	private async void UpdateUser()
	{
		var response = await Http.PatchAsJsonAsync<Customers>("http://localhost:5132/customers", customer);
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			apiCall = true;
			apiResponse = response.Content.ReadAsStringAsync().Result;
			StateHasChanged();
		}
	}

	private async void UpdateProduct()
	{
		
	}
}
