@page "/clients"
@inject HttpClient Http
@using System.ComponentModel.DataAnnotations

<h1>Customer</h1>

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudForm >
            <MudTextField Label="Email" Class="mt-3" @bind-Value="model.Email" For="@(() => model.Email)" />
        </MudForm>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
        </MudCardActions>
        @if (failure == true)
        {
            <MudAlert Severity="Severity.Error" Class="m-3">No customer found</MudAlert>
        }
    </MudCard>
</EditForm>

@if (customer == null)
{
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="UserName" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="UserLevel" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="FirstName" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="LastName" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Email" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Mobile Number" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Street" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Post Code" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="City" @bind-Value="Empty" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Country" @bind-Value="Empty" Disabled="true" />
}
else
{
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="UserName" @bind-Value="customer.username" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="UserLevel" @bind-Value="customer.userlevel" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="FirstName" @bind-Value="customer.firstname" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="LastName" @bind-Value="customer.lastname" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Email" @bind-Value="customer.email" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Mobile Number" @bind-Value="customer.mobile_number" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Street" @bind-Value="customer.delivery_adress.street" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Post Code" @bind-Value="customer.delivery_adress.post_code" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="City" @bind-Value="customer.delivery_adress.city" Disabled="true" />
    <MudTextField Variant="Variant.Outlined" style="color: white" Label="Country" @bind-Value="customer.delivery_adress.country" Disabled="true" />
}

@code {

    CustomerSearch model = new CustomerSearch();

    private bool newCustomer = false;
    private Customers? customer;
    private Customers[]? customers;
    private string Empty { get; set; } = "No content";
    private string requestEmail { get; set; }
    bool failure = false;
    bool RegSuccess = false;

    // protected override async Task OnInitializedAsync()
    // {
        
    // }

    private async Task Search(string email)
    {
        customer = await Http.GetFromJsonAsync<Customers>($"http://localhost:5132/customers/{email}");
        if (customer == null)
        {
            failure = true;
        }
        else
        {
            failure = false;
        }
    }

    public class CustomerSearch
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }

    private async void OnValidSubmit(EditContext context)
    {
        await Search(model.Email);
        StateHasChanged();
    }
}
