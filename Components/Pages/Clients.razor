@page "/clients"
@inject HttpClient Http
@inject ProtectedSessionStorage BrowserStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Headers
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.IdentityModel.Tokens.Jwt

<h1>Customer</h1>

@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    @if (isAdmin)
    {
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudCard>
                <MudForm>
                    <MudTextField Label="Username" Class="mt-3" @bind-Value="model.Username" For="@(() => model.Username)" />
                </MudForm>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
                </MudCardActions>
                @if (failure == true)
                {
                    <MudAlert Severity="Severity.Error" Class="m-3">No customer found</MudAlert>
                }
            </MudCard>
        </EditForm>
    }

    @if (customer != null)
    {
        <MudCard Class="mt-3">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="UserName" Value="@customer.username" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="UserLevel" Value="@customer.userlevel" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="FirstName" Value="@customer.firstname" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="LastName" Value="@customer.lastname" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="Email" Value="@customer.email" ReadOnly="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Variant="Variant.Outlined" Label="Mobile Number" Value="@customer.mobile_number" ReadOnly="true" />
                    </MudItem>
                    @if (customer.delivery_adress != null)
                    {
                        <MudItem xs="12">
                            <MudText Typo="Typo.h6" Class="mb-2">Delivery Address</MudText>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Variant="Variant.Outlined" Label="Street" Value="@customer.delivery_adress.street" ReadOnly="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Variant="Variant.Outlined" Label="Post Code" Value="@customer.delivery_adress.post_code" ReadOnly="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Variant="Variant.Outlined" Label="City" Value="@customer.delivery_adress.city" ReadOnly="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Variant="Variant.Outlined" Label="Country" Value="@customer.delivery_adress.country" ReadOnly="true" />
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
}

@code {

    private CustomerSearch model = new CustomerSearch();
    private bool isAdmin = false;
    private Customers? customer = null;
    private bool failure = false;
    private bool isLoading = true;
    public string storedToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await InitializeComponent();
        StateHasChanged();
    }

    private async Task InitializeComponent()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            await Read();
            if (string.IsNullOrEmpty(storedToken))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", storedToken);
            
            var token = new JwtSecurityTokenHandler().ReadJwtToken(storedToken);
            var username = token.Claims.FirstOrDefault(c => c.Type == "username")?.Value;
            isAdmin = token.Claims.FirstOrDefault(c => c.Type == "isAdmin")?.Value == "true";
            
            Console.WriteLine($"Username from token: {username}"); // Debug utskrift
            
            if (!string.IsNullOrEmpty(username))
            {
                await LoadUserData(username);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in InitializeComponent: {ex.Message}");
            NavigationManager.NavigateTo("/login");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadUserData(string username)
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            var response = await Http.GetFromJsonAsync<Customers>($"https://localhost:7248/Customers/username/{username}");
            if (response != null)
            {
                customer = response;
                Console.WriteLine($"Customer data loaded: {customer.username}"); // Debug utskrift
                failure = false;
            }
            else
            {
                Console.WriteLine("Response was null");
                failure = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
            failure = true;
            customer = null;
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("JWT");
        storedToken = result.Success ? result.Value : "";
    }

    private async Task OnValidSubmit(EditContext context)
    {
        if (isAdmin)
        {
            await LoadUserData(model.Username);
        }
    }

    public class CustomerSearch
    {
        [Required]
        public string Username { get; set; }
    }
}