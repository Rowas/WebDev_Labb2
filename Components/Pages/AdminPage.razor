@page "/admin"
@inject HttpClient Http
@inject IAuthenticationService AuthService
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage BrowserStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Net.Http.Headers

@if (!isInitialized)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!isAuthorized)
{
    <MudAlert Severity="Severity.Error" Class="my-4">
        <MudText>Åtkomst nekad</MudText>
        <MudText Typo="Typo.body2">Du har inte behörighet att se denna sida. Endast administratörer har tillgång.</MudText>
    </MudAlert>
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudPaper Elevation="3" Class="pa-4">
            <MudText Typo="Typo.h4" Class="mb-4">Administratörspanel</MudText>

            <MudGrid Class="mb-4">
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Elevation="2">
                        <MudGrid Justify="Justify.SpaceBetween" Spacing="2">
                            <MudItem xs="12" sm="4">
                                <MudCard Elevation="2" Class="pa-2">
                                    <MudText Typo="Typo.h6" Class="mb-2">Kundhantering</MudText>
                                    <MudStack>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        OnClick="NewCustomer" 
                                        StartIcon="@Icons.Material.Filled.PersonAdd"
                                        FullWidth="true">
                                            Registrera ny kund
                                        </MudButton>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Secondary" 
                                        OnClick="EditCustomer"
                                        StartIcon="@Icons.Material.Filled.Edit"
                                        FullWidth="true">
                                            Redigera kund
                                        </MudButton>
                                    </MudStack>
                                </MudCard>
                            </MudItem>

                            <MudItem xs="12" sm="4">
                                <MudCard Elevation="2" Class="pa-2">
                                    <MudText Typo="Typo.h6" Class="mb-2">Produkthantering</MudText>
                                    <MudStack>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        OnClick="NewProduct"
                                        StartIcon="@Icons.Material.Filled.AddBox"
                                        FullWidth="true">
                                            Registrera ny produkt
                                        </MudButton>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Secondary" 
                                        OnClick="EditProduct"
                                        StartIcon="@Icons.Material.Filled.Edit"
                                        FullWidth="true">
                                            Redigera produkt
                                        </MudButton>
                                    </MudStack>
                                </MudCard>
                            </MudItem>

                            <MudItem xs="12" sm="4">
                                <MudCard Elevation="2" Class="pa-2">
                                    <MudText Typo="Typo.h6" Class="mb-2">Orderhantering</MudText>
                                    <MudStack>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Primary" 
                                        OnClick="NewOrder"
                                        StartIcon="@Icons.Material.Filled.AddShoppingCart"
                                        FullWidth="true">
                                            Skapa ny order
                                        </MudButton>
                                        <MudButton Variant="Variant.Filled" 
                                        Color="Color.Secondary" 
                                        OnClick="EditOrder"
                                        StartIcon="@Icons.Material.Filled.Edit"
                                        FullWidth="true">
                                            Hantera order
                                        </MudButton>
                                    </MudStack>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>

            <MudPaper Class="pa-4" Elevation="2">
                @if (newCustomer)
                {
                    <MudText Typo="Typo.h5" Class="mb-4">Registrera ny kund</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="customer.firstname" Label="Förnamn" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="customer.lastname" Label="Efternamn" Variant="Variant.Outlined" Class="mt-3"/>
                            <MudTextField @bind-Value="customer.email" Label="E-post" Variant="Variant.Outlined" Class="mt-3"/>
                            <MudTextField @bind-Value="customer.mobile_number" Label="Telefon" Variant="Variant.Outlined" Class="mt-3"/>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="customer.delivery_adress.street" Label="Gatuadress" Variant="Variant.Outlined"/>
                            <MudTextField @bind-Value="customer.delivery_adress.post_code" Label="Postnummer" Variant="Variant.Outlined" Class="mt-3"/>
                            <MudTextField @bind-Value="customer.delivery_adress.city" Label="Ort" Variant="Variant.Outlined" Class="mt-3"/>
                            <MudTextField @bind-Value="customer.delivery_adress.country" Label="Land" Variant="Variant.Outlined" Class="mt-3"/>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" 
                            Color="Color.Primary" 
                            OnClick="RegUser"
                            StartIcon="@Icons.Material.Filled.Save">
                                Spara kund
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
                else if (newProduct)
                {
                    <MudText Typo="Typo.h5" Class="mb-4">Registrera ny produkt</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudNumericField @bind-Value="product.sku" Label="SKU" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.name" Label="Namn" Variant="Variant.Outlined" Class="mt-3" />
                            <MudNumericField @bind-Value="product.price" Label="Pris" Variant="Variant.Outlined" Class="mt-3" />
                            <MudSwitch @bind-Value="product.in_stock" Label="I lager" Color="Color.Primary" Class="mt-3" />
                            <MudTextField @bind-Value="product.summary" Label="Beskrivning" Variant="Variant.Outlined" Class="mt-3" Lines="11" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="product.symbol" Label="Symbol" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.phase" Label="Fas" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.group" Label="Grupp" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.category" Label="Kategori" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.period" Label="Period" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.number" Label="Atom Nummer" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.atomic_mass" Label="Atom vikt" Variant="Variant.Outlined" />
                            <MudTextField @bind-Value="product.category" Label="Kategori" Variant="Variant.Outlined" />
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled" 
                            Color="Color.Primary" 
                            OnClick="RegProduct"
                            StartIcon="@Icons.Material.Filled.Save">
                                Spara produkt
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
                else if (editCustomer)
                {
                    <MudSelect T="string" Label="Användare" @bind-Value="customerSearch" Variant="Variant.Outlined">
                        @foreach (var customer in customerList)
                        {
                            <MudSelectItem Value="@customer.email">@customer.username (@customer.firstname @customer.lastname)</MudSelectItem>
                        }
                    </MudSelect>
                    <MudText Typo="Typo.h5" Class="mb-4">Redigera kund</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="customerSearch" 
                            Label="Sök kund (e-post)" 
                            Variant="Variant.Outlined"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnAdornmentClick="SearchCustomer"/>
                        </MudItem>
                    </MudGrid>
                    @if (apiCall && customer != null)
                    {
                        <MudGrid Class="mt-4">
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="customer.firstname" Label="Förnamn" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="customer.lastname" Label="Efternamn" Variant="Variant.Outlined" Class="mt-3"/>
                                <MudTextField @bind-Value="customer.mobile_number" Label="Telefon" Variant="Variant.Outlined" Class="mt-3"/>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="customer.delivery_adress.street" Label="Gatuadress" Variant="Variant.Outlined"/>
                                <MudTextField @bind-Value="customer.delivery_adress.post_code" Label="Postnummer" Variant="Variant.Outlined" Class="mt-3"/>
                                <MudTextField @bind-Value="customer.delivery_adress.city" Label="Ort" Variant="Variant.Outlined" Class="mt-3"/>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled" 
                                Color="Color.Primary" 
                                OnClick="UpdateUser"
                                StartIcon="@Icons.Material.Filled.Save">
                                    Uppdatera kund
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                }
                else if (editProduct)
                {
                    <MudText Typo="Typo.h5" Class="mb-4">Redigera produkt</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="productSearch"
                            Label="Sök produkt (Namn eller sku)"
                            Variant="Variant.Outlined"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnAdornmentClick="SearchProduct" />
                        </MudItem>
                    </MudGrid>
                    @if (apiCall && product != null)
                    {
                        <MudGrid Class="mt-4">
                            <MudItem xs="12" sm="6">
                                <MudNumericField @bind-Value="product.sku" Label="SKU" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.name" Label="Namn" Variant="Variant.Outlined" Class="mt-3" />
                                <MudNumericField @bind-Value="product.price" Label="Pris" Variant="Variant.Outlined" Class="mt-3" />
                                <MudSwitch @bind-Value="product.in_stock" Label="I lager" Color="Color.Primary" Class="mt-3" />
                                <MudTextField @bind-Value="product.summary" Label="Beskrivning" Variant="Variant.Outlined" Class="mt-3" Lines="11" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField @bind-Value="product.symbol" Label="Symbol" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.phase" Label="Fas" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.group" Label="Grupp" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.category" Label="Kategori" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.period" Label="Period" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.number" Label="Atom Nummer" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.atomic_mass" Label="Atom vikt" Variant="Variant.Outlined" />
                                <MudTextField @bind-Value="product.category" Label="Kategori" Variant="Variant.Outlined" />
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled"
                                Color="Color.Primary"
                                OnClick="UpdateProduct"
                                StartIcon="@Icons.Material.Filled.Save">
                                    Uppdatera produkt
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                }
                else if (newOrder)
                {
                    <MudText Typo="Typo.h5" Class="mb-4">Registrera ny order</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudSelect T="string" Label="Användare" @bind-Value="order.username" Variant="Variant.Outlined">
                                @foreach (var customer in customerList)
                                {
                                    <MudSelectItem Value="@customer.username">@customer.username (@customer.firstname @customer.lastname)</MudSelectItem>
                                }
                            </MudSelect>
                            <MudDatePicker @bind-Date="order.order_date" Label="Orderdatum" Variant="Variant.Outlined" Class="mt-3" />
                            <MudDatePicker @bind-Date="order.delivery_date" Label="Leveransdatum" Variant="Variant.Outlined" Class="mt-3" />
                            <MudSelect T="string" Label="Status" @bind-Value="order.status" Variant="Variant.Outlined" Class="mt-3">
                                <MudSelectItem Value="@("Pending")">Pending</MudSelectItem>
                                <MudSelectItem Value="@("Processing")">Processing</MudSelectItem>
                                <MudSelectItem Value="@("Shipped")">Shipped</MudSelectItem>
                                <MudSelectItem Value="@("Delivered")">Delivered</MudSelectItem>
                                <MudSelectItem Value="@("Cancelled")">Cancelled</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <MudText Typo="Typo.h6">Orderrader</MudText>
                                </MudCardHeader>
                                <MudCardContent>
                                    @foreach (var item in order.item_list)
                                    {
                                        <MudGrid>
                                            <MudItem xs="8">
                                                <MudSelect T="int" Label="Produkt" @bind-Value="item.sku" Variant="Variant.Outlined">
                                                    @foreach (var product in productList)
                                                    {
                                                        <MudSelectItem Value="@product.sku">@product.name (@product.sku)</MudSelectItem>
                                                    }
                                                </MudSelect>
                                            </MudItem>
                                            <MudItem xs="4">
                                                <MudNumericField @bind-Value="item.quantity" Label="Antal" Variant="Variant.Outlined" Min="1" />
                                            </MudItem>
                                        </MudGrid>
                                    }
                                </MudCardContent>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Filled"
                                    Color="Color.Secondary"
                                    OnClick="@(() => order.item_list.Add(new ItemList { sku = 0, quantity = 1 }))"
                                    StartIcon="@Icons.Material.Filled.Add">
                                        Lägg till produkt
                                    </MudButton>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-end">
                            <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            OnClick="RegOrder"
                            StartIcon="@Icons.Material.Filled.Save">
                                Spara order
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                }
                else if (editOrder)
                {
                    <MudText Typo="Typo.h5" Class="mb-4">Hantera ordrar</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudTextField @bind-Value="orderSearch"
                            Label="Sök order (Order ID)"
                            Variant="Variant.Outlined"
                            Adornment="Adornment.End"
                            AdornmentIcon="@Icons.Material.Filled.Search"
                            OnAdornmentClick="SearchOrder" />
                        </MudItem>
                    </MudGrid>
                    @if (apiCall && order != null)
                    {
                        <MudGrid Class="mt-4">
                            <MudItem xs="12" sm="6">
                                <MudSelect T="string" Label="Användare" @bind-Value="order.username" Variant="Variant.Outlined" Disabled="true">
                                    <MudSelectItem Value="@order.username">@order.username</MudSelectItem>
                                </MudSelect>
                                <MudDatePicker @bind-Date="order.order_date" Label="Orderdatum" Variant="Variant.Outlined" Class="mt-3" Disabled="true" />
                                <MudDatePicker @bind-Date="order.delivery_date" Label="Leveransdatum" Variant="Variant.Outlined" Class="mt-3" />
                                <MudSelect T="string" Label="Status" @bind-Value="order.status" Variant="Variant.Outlined" Class="mt-3">
                                    <MudSelectItem Value="@("Pending")">Pending</MudSelectItem>
                                    <MudSelectItem Value="@("Processing")">Processing</MudSelectItem>
                                    <MudSelectItem Value="@("Shipped")">Shipped</MudSelectItem>
                                    <MudSelectItem Value="@("Delivered")">Delivered</MudSelectItem>
                                    <MudSelectItem Value="@("Cancelled")">Cancelled</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudCard Elevation="0">
                                    <MudCardHeader>
                                        <MudText Typo="Typo.h6">Orderrader</MudText>
                                    </MudCardHeader>
                                    <MudCardContent>
                                        @foreach (var item in order.item_list)
                                        {
                                            <MudGrid>
                                                <MudItem xs="8">
                                                    <MudSelect T="int" Label="Produkt" @bind-Value="item.sku" Variant="Variant.Outlined" Disabled="true">
                                                        @foreach (var product in productList)
                                                        {
                                                            <MudSelectItem Value="@product.sku">@product.name (@product.sku)</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </MudItem>
                                                <MudItem xs="4">
                                                    <MudNumericField @bind-Value="item.quantity" Label="Antal" Variant="Variant.Outlined" Disabled="true" />
                                                </MudItem>
                                            </MudGrid>
                                        }
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" Class="d-flex justify-end">
                                <MudButton Variant="Variant.Filled"
                                Color="Color.Primary"
                                @* OnClick="@(() => UpdateOrderStatus(selectedOrder.order_id, selectedOrder.status))" *@
                                StartIcon="@Icons.Material.Filled.Save">
                                    Uppdatera order
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    }
                }
            </MudPaper>
            @if (string.IsNullOrEmpty(apiResponse) == false)
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">@apiResponse</MudAlert>
            }
        </MudPaper>
    </MudContainer>

}

@code {
    private bool newCustomer = false;
    private bool newProduct = false;
    private bool editProduct = false;
    private bool editCustomer = false;
    private bool editOrder = false;
    private bool newOrder = false;

    private bool accessDenied = false;

    private bool prodRegSuccess = false;

    private bool apiCall = false;

    private string apiResponse = string.Empty;

    private string customerSearch = string.Empty;
    private string productSearch = string.Empty;
    private string orderSearch = string.Empty;
    private string editField = string.Empty;
    private string editValue = string.Empty;

    Customers customer = new Customers();
    Products product = new Products();
    Order order = new Order();

    List<Customers> customerList;
    List<Products> productList;
    List<Order> orderList;

    public string storedToken { get; set; }

    private bool isAuthorized = false;
    private bool isInitialized = false;
    private string token = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await BrowserStorage.GetAsync<string>("JWT");
            if (!result.Success)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var token = result.Value;
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            try
            {
                var response = await Http.GetAsync("https://localhost:7248/login/validate");
                if (response.IsSuccessStatusCode)
                {
                    var validationResult = await response.Content.ReadFromJsonAsync<LoginValidationResponse>();
                    isAuthorized = validationResult?.user?.userlevel?.ToLower() == "admin";
                }
            }
            catch
            {
                NavigationManager.NavigateTo("/login");
            }
            productList = await Http.GetFromJsonAsync<List<Products>>("https://localhost:7248/products");
            customerList = await Http.GetFromJsonAsync<List<Customers>>("https://localhost:7248/customers");
            orderList = await Http.GetFromJsonAsync<List<Order>>("https://localhost:7248/orders");
            isInitialized = true;
            StateHasChanged();
        }
    }

    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("JWT");
        storedToken = result.Success ? result.Value : "";
    }

    private async void NewCustomer()
    {
        newProduct = false;
        newCustomer = true;
        newOrder = false;
        editCustomer = false;
        editProduct = false;
        product = null;
        customer = new Customers()
			{
				email = "",
				username = "",
				userlevel = "customer",
				firstname = "",
				lastname = "",
				mobile_number = "",
				delivery_adress = new DeliveryAddress()
				{
					street = "",
					post_code = "",
					city = "",
					country = ""
				}
			};
        StateHasChanged();
    }

    private async void NewProduct()
    {
        newCustomer = false;
        newProduct = true;
        newOrder = false;
        editCustomer = false;
        editProduct = false;
        customer = null;
        product = new Products()
			{
                sku = 0,
				price = 0,
                in_stock = false,
                name = "",
				atomic_mass = 0,
				category = "",
                number = 0,
                period = 0,
                group = 0,
                phase = "",
                summary = "",
                symbol = ""
			};
        StateHasChanged();
    }

    private async void NewOrder()
    {
        customerList = await Http.GetFromJsonAsync<List<Customers>>("https://localhost:7248/customers");
        productList = await Http.GetFromJsonAsync<List<Products>>("https://localhost:7248/products");
        newCustomer = false;
        newProduct = false;
        newOrder = true;
        editCustomer = false;
        editProduct = false;
        editOrder = false;
        customer = null;
        product = null;
        order = new Order()
        {
            username = "",
            order_id = "",
            order_date = DateTime.Today,
            delivery_date = DateTime.Today.AddDays(5),
            status = "Pending",
            item_list = new List<ItemList>()
            {
                new ItemList()
                {
                    sku = 0,
                    quantity = 0
                }
            }
        };
        StateHasChanged();
    }

    private async void EditProduct()
    {
        newCustomer = false;
        newProduct = false;
        newOrder = false;
        editCustomer = false;
        editProduct = true;
        customer = null;
        editOrder = true;
        StateHasChanged();
    }

    private async void EditCustomer()
    {
        newCustomer = false;
        newProduct = false;
        newOrder = false;
        editProduct = false;
        editCustomer = true;
        product = null;
        editOrder = true;
        StateHasChanged();
    }

    private async void EditOrder()
    {
        customerList = await Http.GetFromJsonAsync<List<Customers>>("https://localhost:7248/customers");
        productList = await Http.GetFromJsonAsync<List<Products>>("https://localhost:7248/products");
        orderList = await Http.GetFromJsonAsync<List<Order>>("https://localhost:7248/orders");
        newCustomer = false;
        newProduct = false;
        newOrder = false;
        editProduct = false;
        editCustomer = false;
        editOrder = true;
        customer = null;
        product = null;
        StateHasChanged();
    }

    private async void SearchCustomer()
    {
        apiCall = false;
        customer = await Http.GetFromJsonAsync<Customers>($"https://localhost:7248/customers/{customerSearch}");
        apiCall = true;
        if (customer == null)
        {
            apiResponse = "Customer not found";
        }

        StateHasChanged();
    }

    private async void SearchProduct()
    {
        apiCall = false;
        product = await Http.GetFromJsonAsync<Products>($"https://localhost:7248/products/{productSearch}");
        apiCall = true;
        if (product == null)
        {
            apiResponse = "Product not found";
        }
        StateHasChanged();
    }

    private async void SearchOrder()
    {
        apiCall = false;
        order = await Http.GetFromJsonAsync<Order>($"https://localhost:7248/orders/{orderSearch}");
        apiCall = true;
        if (order == null)
        {
			apiResponse = "Order not found";
        }
        StateHasChanged();
    }

    private async void RegUser()
    {
            var response = await Http.PostAsJsonAsync<Customers>("https://localhost:7248/customers", customer);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                apiCall = true;
				apiResponse = "Successfully registered";
                StateHasChanged();
            }
    }

    private async void RegProduct()
    {
            var response = await Http.PostAsJsonAsync<Products>("https://localhost:7248/products", product);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                apiResponse = "Successfully registered";
                StateHasChanged();
            }
    }

    private async void UpdateProduct()
    {
            var response = await Http.PutAsJsonAsync<Products>("https://localhost:7248/products/single/", product);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                apiCall = true;
                apiResponse = "Successfully updated";
                StateHasChanged();
            }
    }

    private async void UpdateUser()
    {
            var response = await Http.PatchAsJsonAsync<Customers>("https://localhost:7248/customers", customer);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                apiCall = true;
                apiResponse = "Successfully updated";
                StateHasChanged();
            }
	}

    private async void RegOrder()
	{
		var response = await Http.PostAsJsonAsync<Order>("https://localhost:7248/orders", order);
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			apiCall = true;
			apiResponse = "Successfully registered";
			StateHasChanged();
		}
	}

    private async void UpdateOrder()
	{
        var response = await Http.PutAsJsonAsync($"https://localhost:7248/orders/{order.order_id}", order);
		if (response.StatusCode == System.Net.HttpStatusCode.OK)
		{
			apiCall = true;
			apiResponse = "Successfully updated";
			StateHasChanged();
		}
	}

    private class LoginValidationResponse
    {
        public string message { get; set; }
        public UserInfo user { get; set; }
    }

    private class UserInfo
    {
        public string username { get; set; }
        public string userlevel { get; set; }
        public string firstname { get; set; }
        public string lastname { get; set; }
        public string email { get; set; }
    }
}
