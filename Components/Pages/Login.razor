@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject HttpClient Http
@inject ProtectedSessionStorage BrowserStorage

<p>@RendererInfo.Name </p>
<p>@AssignedRenderMode </p>

<MudMainContent>
    <MudTabs Centered="true" @bind-ActivePanelIndex="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
        <EditForm FormName="login" Model="@regModel" OnValidSubmit="OnValidSubmitLogin">
            <MudTabPanel Text="login">
                <MudTextField @bind-Value="loginModel.Email" Label="Email" Placeholder="Enter email..." Variant="Variant.Outlined" InputType="InputType.Email" InputMode="InputMode.email" />
                <MudTextField @bind-Value="loginModel.Password" Label="Password" Placeholder="Enter password..." Variant="Variant.Outlined" InputType="InputType.Password" />
                <MudCheckBox @bind-value="loginModel.rememberMe" Label="Remember Me" />
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Login</MudButton>
                </MudCardActions>
            </MudTabPanel>
        </EditForm>
        <EditForm FormName="register" Model="@regModel" OnValidSubmit="OnValidSubmitReg">
            <DataAnnotationsValidator/>
            <MudTabPanel Text="register">
                <MudTextField @bind-Value="regModel.Email" Label="Email" Placeholder="Enter email" Variant="Variant.Outlined" InputType="InputType.Email" />
                <MudTextField @bind-Value="regModel.FirstName" Label="First Name" Placeholder="First name" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.LastName" Label="Last Name" Placeholder="Last name" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.Mobile_Number" Label="Mobile Number" Placeholder="Mobile number" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.Street" Label="Street" Placeholder="Street" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.Post_Code" Label="Post Code" Placeholder="Post code" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.City" Label="City" Placeholder="City" Variant="Variant.Outlined" InputType="InputType.Text" />
                <MudTextField @bind-Value="regModel.Country" Label="Country" Variant="Variant.Outlined" Disabled="true"></MudTextField>
                <br />
                <MudTextField Label="Password" Variant="Variant.Outlined" @bind-Value="regModel.Password" For="@(() => regModel.Password)" InputType="InputType.Password" />
                <MudTextField Label="Repeat Password" Variant="Variant.Outlined" @bind-Value="regModel.Password2" For="@(() => regModel.Password2)" InputType="InputType.Password" />
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Register</MudButton>
                </MudCardActions>
            </MudTabPanel>
        </EditForm>
    </MudTabs>
    @if (RegStatus == System.Net.HttpStatusCode.OK)
    {
        <MudAlert Severity="Severity.Success">Registration successful!</MudAlert>
    }
    @if (RegStatus == System.Net.HttpStatusCode.BadRequest)
    {
        <MudAlert Severity="Severity.Error">Registration failed!</MudAlert>
    }
    @if (LogInStatus == System.Net.HttpStatusCode.OK)
    {
        <MudAlert Severity="Severity.Success">@loginMSG</MudAlert>
        <MudAlert Severity="Severity.Success">@JwtToken.message</MudAlert>
    }
    @if (LogInStatus == System.Net.HttpStatusCode.Unauthorized)
    {
        <MudAlert Severity="Severity.Error">Incorrect Email and/or Password!</MudAlert>
    }
</MudMainContent>

@code {

    RegisterAccountForm regModel = new RegisterAccountForm();
    LoginAccountForm loginModel = new LoginAccountForm();

    private int selectedTab = 0;

    private string loginMSG { get; set; }
    public Jwttoken JwtToken { get; set; }

	public string storedToken { get; set; }

    private System.Net.HttpStatusCode? RegStatus { get; set; }
    private System.Net.HttpStatusCode LogInStatus { get; set; }

    public class LoginAccountForm
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
        [Required]
        public bool rememberMe = false;
    }

    public class RegisterAccountForm
    {
        [Required]
        public string FirstName { get; set; }

        [Required]
        public string LastName { get; set; }

        [Required]
        public string Mobile_Number { get; set; }

        [Required]
        public string Street { get; set; }

        [Required]
        public string Post_Code { get; set; }

        [Required]
        public string City { get; set; }

        public string Country { get; set; } = "Sweden";

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string Password2 { get; set; }

        public string UserName
        {
            get => FirstName.Substring(0, 2) + LastName.Substring(0, 2);
            set => UserName = FirstName.Substring(0, 2) + LastName.Substring(0, 2);
        }

    }

    private async Task OnValidSubmitReg(EditContext context)
    {
        Customers newCustomer = new()
            {
                email = regModel.Email,
                firstname = regModel.FirstName,
                lastname = regModel.LastName,
                mobile_number = regModel.Mobile_Number,
                delivery_adress = new DeliveryAddress
                {
                    street = regModel.Street,
                    post_code = regModel.Post_Code,
                    city = regModel.City,
                    country = regModel.Country
                },
                password = regModel.Password,
                username = regModel.UserName,
                userlevel = "customer"
            };
        var response = await Http.PostAsJsonAsync<Customers>("https://localhost:7248/customers", newCustomer);
        RegStatus = response.StatusCode;
        StateHasChanged();
    }
    private async Task OnValidSubmitLogin(EditContext context)
    {
        CustomerLogin loginPackage = new CustomerLogin
            {
                email = loginModel.Email,
                password = loginModel.Password
            };
        var response = await Http.PostAsJsonAsync<CustomerLogin>("https://localhost:7248/login", loginPackage);

        JwtToken = await response.Content.ReadFromJsonAsync<Jwttoken>();

        // Save(JwtToken.token);

        loginMSG = response.Content.ReadAsStringAsync().Result;
        LogInStatus = response.StatusCode;
        StateHasChanged();
    }

    public async Task Read()
    {
        var result = await BrowserStorage.GetAsync<string>("JWT");
        storedToken = result.Success? result.Value: "";
    }

    public async Task Delete()
    {
        await BrowserStorage.DeleteAsync("name");
    }

    public async Task Save(string token)
    {
        await BrowserStorage.SetAsync("JWT", token);
    }

    private void OnSelectedTabChanged(int index)
    {
        selectedTab = index;
    }

    private class CustomerLogin
    {
        public string email { get; set; }
        public string password { get; set; }
    }
}
